# -*- coding: utf-8 -*-from NaoApplication import *from Features import *from naoqi import ALProxyfrom naoqi import ALBrokerfrom naoqi import ALModuleimport almathimport motionclass Arm(Features):    def __init__(self, robotProxy):        self.name = "Arm"        self.state=0        self.bot = robotProxy            def run(self, robotIP, feature):                 # Instanciation proxy pour les mouvements         motionProxy = self.bot.gMotionProxy        # Instanciation proxy pour la posture intial        postureProxy = self.bot.gPostureProxy              postureProxy.goToPosture("StandInit", 0.5)                   # etat du bras lever ou non        iE=self.state            # si bras bas        if iE ==0 :            iE=1            space      = motion.FRAME_ROBOT            coef       = 2                   # vitesse bras            isAbsolute = False            axisMask   = almath.AXIS_MASK_VEL              times      = [0.5,2.0]           # temps entre les points            effector   = "RArm"            path       = [[0.05, 00.0, 0.15, 0.0, 0.0, 0.0], # point 1                          [0.00, 0.0, 0.35, 0.0, 0.0, 0.0]]  # point 2            motionProxy.positionInterpolation(effector, space, path,                                              axisMask, times, isAbsolute)        # si bras haut        elif iE==1:            iE=0            space      = motion.FRAME_ROBOT            coef       = 2                   # vitesse bras            isAbsolute = False            axisMask   = almath.AXIS_MASK_VEL              times      = [2.0]                 # temps entre les points            effector   = "RArm"            path       = [[0.00, 00.0, 0.0, 0.0, 0.0, 0.0]]  # point  d origine            motionProxy.positionInterpolation(effector, space, path,                                              axisMask, times, isAbsolute)        self.state=iE               