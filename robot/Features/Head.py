# -*- coding: utf-8 -*-from NaoApplication import *class Head(Features):        def __init__(self):        self.name = "Head"              def run(self, robotIP, feature):        # Instanciation proxy pour les mouvements de la tete        try:                proxyhead = ALProxy("ALMotion", robotIP, 9559)        except Exception, e:                print "Could not create proxy to ALMotion"                print "Error was: ", e################################################################################################################        # Instanciation proxy pour la couleur des yeux  A ENLEVER ULTERIEUREMENT        try:                proxyeye = ALProxy("ALLeds", robotIP, 9559)                proxyeye.fadeRGB("FaceLeds", 0x00FF2222, -1)        except Exception, e:                print "Could not create proxy to ALLeds"                print "Error was: ", e################################################################################################################                         # Instanciation proxy pour la posture initiale         try:            postureProxy = ALProxy("ALRobotPosture", robotIP, 9559)        except Exception, e:            print "Could not create proxy to ALRobotPosture"            print "Error was: ", e                #postureProxy.goToPosture("StandInit", 0.5)        # Recuperation des angles envoye par le main           degreHori = (feature["head"][0]) # en radian max |1.8|        degreVerti =(feature["head"][1]) # en radian max entre -0.4 et 0.55        # Reglage proxy pour le mouvement de la tete        proxyhead.setStiffnesses("Head", 1.0)                # Reglage proxy pour le mouvement horizontal de la tete        names = "HeadYaw"        angles = degreHori        times = 1.5        isAbsolute = True        proxyhead.post.angleInterpolation(names, angles, times, isAbsolute)        # Reglage proxy pour le mouvement vertical de la tete         names = "HeadPitch"        angles = degreVerti        times = 1.5        isAbsolute = True        proxyhead.post.angleInterpolation(names, angles, times, isAbsolute)             