# -*- coding: utf-8 -*-from NaoApplication import *class Move(Features):    def __init__(self):        self.name = "Move"    def run(self, robotIP, feature):        # Instanciation proxy pour les mouvements des bras lors de la marche        try:            motionProxy = ALProxy("ALMotion", robotIP, 9559)        except Exception, e:            print "Could not create proxy to ALMotion"            print "Error was: ", e                   # Instanciation proxy pour les deplacements         try:            navigationProxy = ALProxy("ALNavigation", robotIP, 9559)        except Exception, e:            print "Could not create proxy to ALRobotNavigation"            print "Error was: ", e                    # Instanciation proxy pour la posture initiale           try:            postureProxy = ALProxy("ALRobotPosture", robotIP, 9559)        except Exception, e:            print "Could not create proxy to ALRobotPosture"            print "Error was: ", e        # Mise en position intiale de NAO        postureProxy.goToPosture("StandInit", 0.5)               # Activation mouvement automatique des bras lors de la marche        motionProxy.setMoveArmsEnabled(True, True)        # Activation des detections des obstacles        motionProxy.setMotionConfig([["ENABLE_FOOT_CONTACT_PROTECTION", True]])               if feature["stop"] :            motionProxy.stopMove()                    elif feature["forward"] :               x     = 1.0            y     = 0.0            theta = 0.0            frequency = 1.0            motionProxy.moveToward(x, y, theta, [["Frequency", frequency]])                    elif feature["backward"] :            x     = -1.0            y     = 0.0            theta = 0.0            frequency = 1.0            motionProxy.moveToward(x, y, theta, [["Frequency", frequency]])                    elif feature["right"] :             navigationProxy.moveTo(0.0, 0.0, -1.0)             motionProxy.waitUntilMoveIsFinished()        elif feature["left"] :             navigationProxy.moveTo(0.0, 0.0, 1.0)             motionProxy.waitUntilMoveIsFinished()                             